# -*- coding: utf-8 -*-
"""Spelling and Grammer Checker_Rule_Base_01.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1agBR4IxIWOiBxGTjoiqk7B3_yMR2Zv8A
"""

!pip install python-docx

#///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import re

# Define the correct verbs structure
correct_verbs = {
    "මම": {
        "future": {
            "යාවි": "යන්නෙමි",  # Explicit rule for 'යාවි' to 'යන්නෙමි'
            "කාවි": "කන්නෙමි",
            "බෝවි": "බොන්නෙමි",
            "නාවි": "නාන්නෙමි",
            "නගීවි": "නගින්නෙමි",
            "බහීවි": "බසින්නෙමි",
            "අදීවි": "අදින්නෙමි",
            "කරාවි": "කරන්නෙමි",
            "ඒවි": "එන්නෙමි",
            "සෝදාවි": "සෝදන්නෙමි",
            "පිසීවි": "පිසින්නෙමි",
            "කරාවී": "කරන්නෙමි",
            "ගාවි": "ගන්නෙමි",
            "හිතාවී": "හිතන්නෙමි",
            "වේවි": "වෙන්නෙමි"
        },
        "present": {
            "යනවා": "යමි",
            "කනවා": "කමි",
            "බොනවා": "බොමි",
            "නානවා": "නාමි",
            "නගිනවා": "නගිමි",
            "බහිනවා": "බහිමි",
            "අදිනවා": "අදිමි",
            "කරනවා": "කරමි",  # Fixing this rule
            "එනවා": "එමි",
            "සෝදනවා": "සෝදමි",
            "පිසිනවා": "පිසිමි",
            "ගියා": "යමි",
            "ගන්නවා": "ගමි",
            "හිතනවා": "හිතමි",
            "වෙනවා": "වෙමි"
        },
        "past": {
            "යන්නේය": "ගියෙමි",
            "කෑවේය": "කෑවෙමි",
            "බීවේය": "බීවෙමි",
            "නෑවේය": "නෑවෙමි",
            "නැග්ගේය": "නැග්ගෙමි",
            "බැස්සේය": "බැස්සෙමි",
            "ඇන්දේය": "ඇන්දෙමි",
            "කරේය": "කලෙමි",
            "එන්නේය": "ආවෙමි",
            "සේදුවේය": "සේදුවෙමි",
            "පිස්සේය": "පිස්සෙමි",
            "කලේය": "කලෙමි",
            "ගන්නේය": "ගත්තෙමි",
            "හිතන්නේය": "හිතුවෙමි",
            "වුනා": "වුනෙමි"
        }
    },
    "අපි": {
        "future": {
            "යාවි": "යන්නෙමු",  # Explicit rule for 'යාවි' to 'යන්නෙමු'
            "කාවි": "කන්නෙමු",
            "බෝවි": "බොන්නෙමු",
            "නාවි": "නාන්නෙමු",
            "නගීවි": "නගින්නෙමු",
            "බහීවි": "බසින්නෙමු",
            "අදීවි": "අදින්නෙමු",
            "කරාවි": "කරන්නෙමු",
            "ඒවි": "එන්නෙමු",
            "සෝදාවි": "සෝදන්නෙමු",
            "පිසීවි": "පිසින්නෙමු",
            "කරාවී": "කරන්නෙමු",
            "ගාවි": "ගන්නෙමු",
            "හිතාවී": "හිතන්නෙමු",
            "වේවි": "වෙන්නෙමු"

        },
        "present": {
            "යනවා": "යමු",
            "කනවා": "කමු",
            "බොනවා": "බොමු",
            "නානවා": "නාමු",
            "නගිනවා": "නගිමු",
            "බහිනවා": "බහිමු",
            "අදිනවා": "අදිමු",
            "කරනවා": "කරමු",
            "එනවා": "එමු",
            "සෝදනවා": "සෝදමු",
            "පිසිනවා": "පිසිමු",
            "කරනවා": "කරමු",
            "වුනා": "වුනෙමු",
            "ගන්නවා": "ගමු",
            "හිතනවා": "හිතමු",
             "වෙනවා":"වෙමු"
        },
        "past": {
            "යන්නේය": "ගියෙමු",
            "කෑවේය": "කෑවෙමු",
            "බීවේය": "බීවෙමු",
            "නෑවේය": "නෑවෙමු",
            "නැග්ගේය": "නැග්ගෙමු",
            "බැස්සේය": "බැස්සෙමු",
            "ඇන්දේය": "ඇන්දෙමු",
            "කරේය": "කලෙමු",
            "එන්නේය": "ආවෙමු",
            "සේදුවේය": "සේදුවෙමු",
            "පිස්සේය": "පිස්සෙමු",
            "කලේය": "කලෙමු",
            "ගන්නේය": "ගත්තෙමු",
            "හිතන්නේය": "හිතුවෙමු",
            "වුනා": "වුනෙමු"
        }
    }
}


# Additional corrections for specific words
additional_corrections = {
    "ගවේශණය": "ගවේශනය",
    "පරීකෂනයට": "පරීකෂණයට"
}

def correct_word(word, subject=None):
    """Corrects words based on subject and specific rules."""
    suggestions = []

    # Apply verb corrections based on the subject
    if subject and subject in correct_verbs:
        for tense, verbs in correct_verbs[subject].items():
            if word in verbs:
                corrected_word = verbs[word]
                suggestions.append(f"Replace '{word}' with '{corrected_word}'")
                word = corrected_word

    # Rule for 'ෂ' and 'ශ' patterns
    if re.search(r'(ෂ|ෂෙ|ෂො|ෂේ|ෂෝ|ෂ්)න', word):
        corrected_word = re.sub(r'(ෂ|ෂෙ|ෂො|ෂේ|ෂෝ|ෂ්)න', r'\1ණ', word)
        suggestions.append(f"Replace '{word}' with '{corrected_word}'")
        word = corrected_word

    if re.search(r'(ශ|ශෙ|ශේ|ශො|ශෝ)න', word):
        corrected_word = re.sub(r'(ශ|ශෙ|ශේ|ශො|ශෝ)න', r'\1න', word)
        suggestions.append(f"Replace '{word}' with '{corrected_word}'")
        word = corrected_word

    if re.search(r'(ර්|ර|රෝ|රො|රි|රී|රු|රූ)[නනෙනේනොනෝ]', word):
        corrected_word = re.sub(r'(ර්|ර|රෝ|රො|රි|රී|රු|රූ)[න]', r'\1න', word)
        suggestions.append(f"Replace '{word}' with '{corrected_word}'")
        word = corrected_word

    # Apply additional corrections
    for incorrect_word, corrected_word in additional_corrections.items():
        if incorrect_word in word:
            suggestions.append(f"Replace '{incorrect_word}' with '{corrected_word}'")
            word = word.replace(incorrect_word, corrected_word)

    return suggestions, word


def correct_sentence(sentence):
    """Corrects words in the given sentence."""
    suggestions = []
    words = sentence.split()
    corrected_sentence = []

    # Extract the subject
    subject = words[0] if words[0] in correct_verbs else None

    for word in words:
        word_suggestions, corrected_word = correct_word(word, subject)
        if word_suggestions:
            suggestions.extend(word_suggestions)
        corrected_sentence.append(corrected_word)

    corrected_sentence = ' '.join(corrected_sentence)
    return corrected_sentence, suggestions


def correct_paragraph(paragraph):
    """Corrects a paragraph by processing each sentence individually."""
    suggestions = []
    corrected_paragraph = []

    # Split paragraph into sentences based on '.'
    sentences = paragraph.split('.')
    for sentence in sentences:
        if sentence.strip():  # Ignore empty sentences
            corrected_sentence, sentence_suggestions = correct_sentence(sentence.strip())
            suggestions.extend(sentence_suggestions)
            corrected_paragraph.append(corrected_sentence)

    # Combine sentences back with '.'
    corrected_paragraph = '. '.join(corrected_paragraph) + '.'
    return corrected_paragraph, suggestions


while True:
    # Taking user input
    user_input = input("\n Enter a paragraph in Sinhala for correction (or type 'exit' to quit): ")

    # Check for exit condition
    if user_input.lower() == 'exit':
        print("Exiting the program. Goodbye!")
        break

    # Correcting the paragraph
    corrected_paragraph, suggestions = correct_paragraph(user_input)

    # Displaying the results
    print(f"Corrected paragraph: {corrected_paragraph}")
    if suggestions:
        print("Suggestions:")
        for suggestion in suggestions:
            print(f"- {suggestion}")
    else:
        print("No suggestions.")

import re
from sklearn.metrics import accuracy_score

# Define the correct verbs structure
correct_verbs = {
    "මම": {
        "future": {
            "යාවි": "යන්නෙමි",  # Explicit rule for 'යාවි' to 'යන්නෙමි'
            "කාවි": "කන්නෙමි",
            "බෝවි": "බොන්නෙමි",
            "නාවි": "නාන්නෙමි",
            "නගීවි": "නගින්නෙමි",
            "බහීවි": "බසින්නෙමි",
            "අදීවි": "අදින්නෙමි",
            "කරාවි": "කරන්නෙමි",
            "ඒවි": "එන්නෙමි",
            "සෝදාවි": "සෝදන්නෙමි",
            "පිසීවි": "පිසින්නෙමි",
            "කරාවී": "කරන්නෙමි",
            "ගාවි": "ගන්නෙමි",
            "හිතාවී": "හිතන්නෙමි",
            "වේවි": "වෙන්නෙමි"
        },
        "present": {
            "යනවා": "යමි",
            "කනවා": "කමි",
            "බොනවා": "බොමි",
            "නානවා": "නාමි",
            "නගිනවා": "නගිමි",
            "බහිනවා": "බහිමි",
            "අදිනවා": "අදිමි",
            "කරනවා": "කරමි",  # Fixing this rule
            "එනවා": "එමි",
            "සෝදනවා": "සෝදමි",
            "පිසිනවා": "පිසිමි",
            "ගියා": "යමි",
            "ගන්නවා": "ගමි",
            "හිතනවා": "හිතමි",
            "වෙනවා": "වෙමි"
        },
        "past": {
            "යන්නේය": "ගියෙමි",
            "කෑවේය": "කෑවෙමි",
            "බීවේය": "බීවෙමි",
            "නෑවේය": "නෑවෙමි",
            "නැග්ගේය": "නැග්ගෙමි",
            "බැස්සේය": "බැස්සෙමි",
            "ඇන්දේය": "ඇන්දෙමි",
            "කරේය": "කලෙමි",
            "එන්නේය": "ආවෙමි",
            "සේදුවේය": "සේදුවෙමි",
            "පිස්සේය": "පිස්සෙමි",
            "කලේය": "කලෙමි",
            "ගන්නේය": "ගත්තෙමි",
            "හිතන්නේය": "හිතුවෙමි",
            "වුනා": "වුනෙමි"
        }
    },
    "අපි": {
        "future": {
            "යාවි": "යන්නෙමු",  # Explicit rule for 'යාවි' to 'යන්නෙමු'
            "කාවි": "කන්නෙමු",
            "බෝවි": "බොන්නෙමු",
            "නාවි": "නාන්නෙමු",
            "නගීවි": "නගින්නෙමු",
            "බහීවි": "බසින්නෙමු",
            "අදීවි": "අදින්නෙමු",
            "කරාවි": "කරන්නෙමු",
            "ඒවි": "එන්නෙමු",
            "සෝදාවි": "සෝදන්නෙමු",
            "පිසීවි": "පිසින්නෙමු",
            "කරාවී": "කරන්නෙමු",
            "ගාවි": "ගන්නෙමු",
            "හිතාවී": "හිතන්නෙමු",
            "වේවි": "වෙන්නෙමු"

        },
        "present": {
            "යනවා": "යමු",
            "කනවා": "කමු",
            "බොනවා": "බොමු",
            "නානවා": "නාමු",
            "නගිනවා": "නගිමු",
            "බහිනවා": "බහිමු",
            "අදිනවා": "අදිමු",
            "කරනවා": "කරමු",
            "එනවා": "එමු",
            "සෝදනවා": "සෝදමු",
            "පිසිනවා": "පිසිමු",
            "කරනවා": "කරමු",
            "වුනා": "වුනෙමු",
            "ගන්නවා": "ගමු",
            "හිතනවා": "හිතමු",
             "වෙනවා":"වෙමු"
        },
        "past": {
            "යන්නේය": "ගියෙමු",
            "කෑවේය": "කෑවෙමු",
            "බීවේය": "බීවෙමු",
            "නෑවේය": "නෑවෙමු",
            "නැග්ගේය": "නැග්ගෙමු",
            "බැස්සේය": "බැස්සෙමු",
            "ඇන්දේය": "ඇන්දෙමු",
            "කරේය": "කලෙමු",
            "එන්නේය": "ආවෙමු",
            "සේදුවේය": "සේදුවෙමු",
            "පිස්සේය": "පිස්සෙමු",
            "කලේය": "කලෙමු",
            "ගන්නේය": "ගත්තෙමු",
            "හිතන්නේය": "හිතුවෙමු",
            "වුනා": "වුනෙමු"
        }
    }
}


# Additional corrections for specific words
additional_corrections = {
    "ගවේශණය": "ගවේශනය",
    "පරීකෂනයට": "පරීකෂණයට"
}

def correct_word(word, subject=None):
    """Corrects words based on subject and specific rules."""
    suggestions = []

    # Apply verb corrections based on the subject
    if subject and subject in correct_verbs:
        for tense, verbs in correct_verbs[subject].items():
            if word in verbs:
                corrected_word = verbs[word]
                suggestions.append(f"Replace '{word}' with '{corrected_word}'")
                word = corrected_word

    # Rule for 'ෂ' and 'ශ' patterns
    if re.search(r'(ෂ|ෂෙ|ෂො|ෂේ|ෂෝ|ෂ්)න', word):
        corrected_word = re.sub(r'(ෂ|ෂෙ|ෂො|ෂේ|ෂෝ|ෂ්)න', r'\1ණ', word)
        suggestions.append(f"Replace '{word}' with '{corrected_word}'")
        word = corrected_word

    if re.search(r'(ශ|ශෙ|ශේ|ශො|ශෝ)න', word):
        corrected_word = re.sub(r'(ශ|ශෙ|ශේ|ශො|ශෝ)න', r'\1න', word)
        suggestions.append(f"Replace '{word}' with '{corrected_word}'")
        word = corrected_word

    if re.search(r'(ර්|ර|රෝ|රො|රි|රී|රු|රූ)[නනෙනේනොනෝ]', word):
        corrected_word = re.sub(r'(ර්|ර|රෝ|රො|රි|රී|රු|රූ)[න]', r'\1න', word)
        suggestions.append(f"Replace '{word}' with '{corrected_word}'")
        word = corrected_word

    # Apply additional corrections
    for incorrect_word, corrected_word in additional_corrections.items():
        if incorrect_word in word:
            suggestions.append(f"Replace '{incorrect_word}' with '{corrected_word}'")
            word = word.replace(incorrect_word, corrected_word)

    return suggestions, word


def correct_sentence(sentence):
    """Corrects words in the given sentence."""
    suggestions = []
    words = sentence.split()
    corrected_sentence = []

    # Extract the subject
    subject = words[0] if words[0] in correct_verbs else None

    for word in words:
        word_suggestions, corrected_word = correct_word(word, subject)
        if word_suggestions:
            suggestions.extend(word_suggestions)
        corrected_sentence.append(corrected_word)

    corrected_sentence = ' '.join(corrected_sentence)
    return corrected_sentence, suggestions


def correct_paragraph(paragraph):
    """Corrects a paragraph by processing each sentence individually."""
    suggestions = []
    corrected_paragraph = []

    # Split paragraph into sentences based on '.'
    sentences = paragraph.split('.')
    for sentence in sentences:
        if sentence.strip():  # Ignore empty sentences
            corrected_sentence, sentence_suggestions = correct_sentence(sentence.strip())
            suggestions.extend(sentence_suggestions)
            corrected_paragraph.append(corrected_sentence)

    # Combine sentences back with '.'
    corrected_paragraph = '. '.join(corrected_paragraph) + '.'
    return corrected_paragraph, suggestions

def calculate_accuracy(true_paragraph, corrected_paragraph):
    """Calculates accuracy by comparing the true paragraph with the corrected paragraph."""
    true_words = true_paragraph.split()
    corrected_words = corrected_paragraph.split()

    # Compare word-by-word accuracy
    accurate_count = sum([1 for true, corrected in zip(true_words, corrected_words) if true == corrected])
    accuracy = accurate_count / len(true_words) * 100 if true_words else 0
    return accuracy

while True:
    # Taking user input
    user_input = input("\nEnter a paragraph in Sinhala for correction (or type 'exit' to quit): ")

    # Check for exit condition
    if user_input.lower() == 'exit':
        print("Exiting the program. Goodbye!")
        break

    # The true paragraph (for comparison)
    true_paragraph = input("\nEnter the true paragraph for comparison: ")

    # Correcting the paragraph using the model
    corrected_paragraph, suggestions = correct_paragraph(user_input)

    # Displaying the results
    print(f"Corrected paragraph: {corrected_paragraph}")
    if suggestions:
        print("Suggestions:")
        for suggestion in suggestions:
            print(f"- {suggestion}")
    else:
        print("No suggestions.")

    # Calculate and display accuracy
    accuracy = calculate_accuracy(true_paragraph, corrected_paragraph)
    print(f"Accuracy: {accuracy:.2f}%")